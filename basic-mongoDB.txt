A) Query / Find Document 

1. get all documents 

Ans : db.movies.find()

2. get all documents with writer set to "Quentin Tarantino"

Ans: db.movies.find({writer: 'Quentin Tarantino'})

3. get all documents where actors include "Brad Pitt" ? 

Ans: db.movies.find({actors: 'Brad Pitt' })

4. get all documents with franchise set to "The Hobbit" ? 

Ans: db.movies.find({franchise: 'The Hobbit'}) 

5. get all movies released in the 90s ? 

Ans: db.movies.find({year:{$gt: 1990} } ) 

6. get all movies released before the year 2000 or after 2010 ?

Ans: db.movies.find({$or: [{year: {$lt: 2000}} , {year: {$gt: 2010}}]})

B) Update Documents 

1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, 
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of 
dwarves to reclaim their mountain home - and the gold within it - from the 
dragon Smaug." 

Ans: db.movies.update( { title: "The Hobbit: An Unexpected Journey" }, { $set: { synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely 
Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." } } )

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, 
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim 
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a 
mysterious and magical ring."

Ans: db.movies.update( {title: "The Hobbit: The Desolation of Smaug" }, {$set: { synopsis: The dwarves, along with Bilbo Baggins and Gandalf the Grey,
continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." } } ) 

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction

Ans: db.movies.update({title: "Pulp Fiction" } , {$addToSet: {actors: 'Samuel L.Jackson' }})

C) Text Search

1. find all movies that have a synopsis that contains the word "Bilbo"

Ans: db.movies.createIndex({synopsis:"text"})
     db.movies.find({$text: {$search: "Bilbo"}})

2. find all movies that have a synopsis that contains the word "Gandalf"

Ans: db.movies.find({$text: {$search: "Gandalf"}})

3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf" 

Ans: db.movies.find({$text: {$search: "Bilbo -Gandalf"}})

4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"

Ans: db.movies.find({$text: {$search: "dwarves hobbit"}})

5. find all movies that have a synopsis that contains the word "gold" and "dragon"

Ans: db.movies.find({$text:{$search:"\"gold dragon\""}})

D) Delete Documents

1. delete the movie "Pee Wee Herman's Big Adventure" ?

Ans: db.movies.deleteOne({title:"Pee Wee Herman's Big Adventure"}) 

2. delete the movie "Avatar" ? 

Ans: db.movies.deleteOne({title: "Avatar" }) 

E) Relationships 

1. find all users ?

Ans: db.users.find()

2. find all posts? 

Ans: db.posts.find()

3. find all posts that was authored by "GoodGuyGreg" ? 

Ans: db.posts.find({username:"GoodGuyGreg"})

4. find all posts that was authored by "ScumbagSteve" ? 

Ans: db.posts.find({username:"ScumbagSteve"})

5. find all comments ? 

Ans: db.comments.find()

6. find all comments that was authored by "GoodGuyGreg" ? 

Ans: db.comments.find({username:"GoodGuyGreg"})

7. find all comments that was authored by "ScumbagSteve"

Ans: db.comments.find({username:"ScumbagSteve"})

8. find all comments belonging to the post "Reports a bug in your code"

Ans: db.comments.find({post: {ObjectId("6204d7ade0eb4e4de979c48f")})
